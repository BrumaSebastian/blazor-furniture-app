@inherits LayoutComponentBase
@rendermode InteractiveWebAssembly
@inject IThemeService ThemeService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<MudThemeProvider Theme="@theme" IsDarkMode="isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
	<MudAppBar Elevation="1" Dense="true">
		<MudIconButton Icon="@Icons.Material.Filled.Menu"
					   Color="Color.Inherit"
					   Edge="Edge.Start"
					   OnClick="@DrawerToggle" />
		<MudText Typo="Typo.h6">@CommonResource.message_welcome, @userFirstName</MudText>

		<MudSpacer />

		<MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
		<MudIconButton Icon="@Icons.Material.Filled.Home"
					   Color="Color.Inherit"
					   Href="/"/>
	</MudAppBar>

	<MudDrawer @bind-Open="drawerOpen"
			   Elevation="2"
			   Variant="DrawerVariant.Persistent">
		<MudDrawerHeader>
			<MudText Typo="Typo.h6">Management</MudText>
		</MudDrawerHeader>
		<MudNavMenu>
			<AdminNavMenu />
		</MudNavMenu>
	</MudDrawer>

	<MudMainContent Class="pt-16 px-4">
		@Body
	</MudMainContent>
</MudLayout>

@code {
	private MudTheme? theme;
	private bool isDarkMode = true;
	private bool drawerOpen = true;
	private string? userFirstName;

	protected override async Task OnInitializedAsync()
	{
		theme = ThemeService.GetTheme(ThemeType.Admin);
		isDarkMode = ThemeService.IsDarkMode;
		ThemeService.OnThemeChanged += OnThemeChanged;

		// Get user info directly from AuthenticationStateProvider
		await LoadUserInfo();
	}

	private async Task LoadUserInfo()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity?.IsAuthenticated is true)
		{
			userFirstName = user.Identity.Name;
		}
	}

	private string DarkLightModeButtonIcon => isDarkMode switch
	{
		true => Icons.Material.Rounded.AutoMode,
		false => Icons.Material.Outlined.DarkMode,
	};

	private void DrawerToggle() => drawerOpen = !drawerOpen;
	private void DarkModeToggle() => ThemeService.ToggleDarkMode();

	private void OnThemeChanged()
	{
		isDarkMode = ThemeService.IsDarkMode;
		StateHasChanged();
	}

	public void Dispose()	
	{
		ThemeService.OnThemeChanged -= OnThemeChanged;
	}
}