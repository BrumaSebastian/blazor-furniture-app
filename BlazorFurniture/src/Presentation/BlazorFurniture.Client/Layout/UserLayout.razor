@inherits LayoutComponentBase
@inject IThemeService ThemeService
@implements IDisposable

<MudThemeProvider Theme="@theme" IsDarkMode="@isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
	<MudAppBar Elevation="1">
		<MudIconButton Icon="@Icons.Material.Filled.Menu"
					   Color="Color.Inherit"
					   Edge="Edge.Start"
					   OnClick="@DrawerToggle" />
		<MudText Typo="Typo.h6">My Account</MudText>
		<MudSpacer />
		<UserNavMenu />
		<MudIconButton Icon="@DarkModeIcon" Color="Color.Inherit" OnClick="@ToggleDarkMode" />
	</MudAppBar>

	<MudDrawer @bind-Open="drawerOpen" Elevation="2">
		<MudNavMenu>
			<UserNavMenu />
		</MudNavMenu>
	</MudDrawer>

	<MudMainContent Class="pt-16 px-4">
		@Body
	</MudMainContent>
</MudLayout>

@code {
	private MudTheme? theme;
	private bool isDarkMode = true; // User prefers dark
	private bool drawerOpen = false;

	protected override void OnInitialized()
	{
		theme = ThemeService.GetTheme(ThemeType.User);
		isDarkMode = ThemeService.IsDarkMode;
		ThemeService.OnThemeChanged += OnThemeChanged;
	}

	private void OnThemeChanged()
	{
		isDarkMode = ThemeService.IsDarkMode;
		StateHasChanged();
	}

	private void DrawerToggle() => drawerOpen = !drawerOpen;
	private void ToggleDarkMode() => ThemeService.ToggleDarkMode();

	private string DarkModeIcon => isDarkMode
		? Icons.Material.Filled.LightMode
		: Icons.Material.Filled.DarkMode;

	public void Dispose()
	{
		ThemeService.OnThemeChanged -= OnThemeChanged;
	}
}