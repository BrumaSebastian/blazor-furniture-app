@page "/admin/dashboard"
@using BlazorFurniture.Shared.Components.Admin.Groups
@layout AdminLayout
@* @rendermode InteractiveWebAssembly *@
@attribute [Authorize]
@inject ISearchService SearchService

@* @inject AuthenticationStateProvider AuthenticationStateProvider *@


@* <PermissionGuard RequiredRole="PlatformRoles.Admin" RedirectTo="/">
    <PageTitle>Admin Dashboard</PageTitle>

    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        
        <!-- Dashboard content -->
    </MudContainer>
</PermissionGuard> *@
<h1>@SearchService.SearchTerm</h1>

<MudGrid>
	<MudItem xs="12" sm="6" md="3">
		<StatCard Title="Total Users"
					Value="1,234"
					Subtitle="+12% from last month"
					SubtitleColor="Color.Success"
					Icon="@Icons.Material.Filled.People"
					IconColor="Color.Primary" />
	</MudItem>
	<MudItem xs="12" sm="6" md="3">
		<StatCard Title="Active Sessions"
					Value="89"
					Icon="@Icons.Material.Filled.Wifi"
					IconColor="Color.Info" />
	</MudItem>
</MudGrid>

<ActivityTimeline Activities="@recentActivities" />

@if (UserPermissions is not null)
{
	<UserGroups Groups=UserPermissions.Groups></UserGroups>
}

@code {
	[Inject] private IPermissionsService PermissionsService { get; init; } = null!;

	public UserPermissions? UserPermissions { get; set; }
	private List<ActivityTimeline.ActivityItem> recentActivities = new()
	{
		new() { Title = "User Login", Description = "John Doe logged in", Time = "2 min ago", Color = Color.Success },
		new() { Title = "Group Created", Description = "Admin group created", Time = "1 hour ago", Color = Color.Info }
	};

    protected override void OnInitialized()
    {
        // Access the search value
		SearchService.OnSearchChanged += HandleSearchChanged;
    }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			UserPermissions = await PermissionsService.GetUserPermissions();
			StateHasChanged();
		}
	}

	private void HandleSearchChanged()
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		SearchService.OnSearchChanged -= HandleSearchChanged;
	}
}