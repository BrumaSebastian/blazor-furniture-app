@inject IThemeService ThemeService
@inject ISearchService SearchService
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<MudThemeProvider Theme="@theme" IsDarkMode="isDarkMode" />

<MudAppBar Elevation=2>
	<MudIconButton Icon="@Icons.Material.Filled.Menu"
				   Color="Color.Inherit"
				   Edge="Edge.Start"
				   OnClick="@DrawerToggle" />
	<MudText Typo="Typo.h6">@CommonResource.message_welcome, @userFirstName</MudText>

	<MudSpacer />

	<MudContainer Class="d-flex align-center gap-2" MaxWidth="MaxWidth.Small">
		<MudTextField Class="flex-grow-1" @bind-Value=@SearchService.SearchTerm Label="Search" Immediate=true DebounceInterval="300" Variant="Variant.Text" Margin="Margin.Dense" FullWidth=false></MudTextField>
		<MudBadge Content="2" Color="Color.Primary" Overlap=true>
			<MudIconButton Icon="@Icons.Material.Filled.CircleNotifications" Color="Color.Default" />
		</MudBadge>
		<MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
		<MudAvatar>
			<MudImage Src="https://picsum.photos/200/300"></MudImage>
		</MudAvatar>
	</MudContainer>
</MudAppBar>

@code {
	private MudTheme? theme;
	private bool isDarkMode = false;
	private string? userFirstName;

	[Parameter]
	public bool IsDrawerOpen { get; set; }

	[Parameter]
	public EventCallback<bool> IsDrawerOpenChanged { get; set; }

	protected override async Task OnInitializedAsync()
	{
		theme = ThemeService.GetTheme(ThemeType.Admin);
		isDarkMode = ThemeService.IsDarkMode;
		ThemeService.OnThemeChanged += OnThemeChanged;

		// Get user info directly from AuthenticationStateProvider
		await LoadUserInfo();
	}

	private async Task LoadUserInfo()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity?.IsAuthenticated is true)
		{
			userFirstName = user.Identity.Name;
		}
	}

	private string DarkLightModeButtonIcon => isDarkMode switch
	{
		true => Icons.Material.Rounded.AutoMode,
		false => Icons.Material.Outlined.DarkMode,
	};

	private async Task DrawerToggle()
	{
		IsDrawerOpen = !IsDrawerOpen;

		if (IsDrawerOpenChanged.HasDelegate)
		{
			await IsDrawerOpenChanged.InvokeAsync(IsDrawerOpen);
		}
	}
	private void DarkModeToggle() => ThemeService.ToggleDarkMode();

	private void OnThemeChanged()
	{
		isDarkMode = ThemeService.IsDarkMode;
		StateHasChanged();
	}

	public void Dispose()
	{
		ThemeService.OnThemeChanged -= OnThemeChanged;
	}
}