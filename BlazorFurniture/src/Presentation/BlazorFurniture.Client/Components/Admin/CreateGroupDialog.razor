@using BlazorFurniture.Shared.Models.Groups
@using BlazorFurniture.Shared.Resources.Pages.Admin
@using BlazorFurniture.Shared.Validators.Groups
@using BlazorFurniture.Shared.Validators;
@using FluentValidation

<MudDialog>
	<TitleContent>
        <MudText Typo="Typo.subtitle1" GutterBottom="true">@AdminResource.createGroup_title</MudText>
	</TitleContent>
	<DialogContent>
        <MudForm Model="@model" @ref="@form" Validation="@(createGroupValidator.AsPropertyValidator())">
            <MudCardContent>
                <MudTextField @bind-Value="model.Name"
                              For="@(() => model.Name)"
                              Immediate="true"
                              Label="@CommonResource.model_name" />
            </MudCardContent>
        </MudForm>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">@CommonResource.button_cancel</MudButton>
        <MudButton Color="Color.Primary" ButtonType=ButtonType.Submit OnClick="@(async () => await Submit())">@CommonResource.button_submit</MudButton>
	</DialogActions>
</MudDialog>

@code {
    [Inject] public required IDialogService DialogService { get; init; }
    [Inject] public required ISnackbar Snackbar { get; init; }

    private MudForm form = null!; 
    private readonly CreateGroupModel model = new();
    private readonly CreateGroupModelValidator createGroupValidator = new();

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    private async Task Submit()
    {
        await form.Validate();

        if(form.IsValid)
        {
            Snackbar.Add("Created!");
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

	private void Cancel() => MudDialog.Cancel();
}
