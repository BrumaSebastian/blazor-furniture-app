@inject IPermissionsService PermissionsService
@inject NavigationManager Navigation

@if (isLoading)
{
	<MudContainer Class="d-flex justify-center align-center" Style="height: 100vh;">
		<MudProgressCircular Indeterminate="true" />
	</MudContainer>
}
else if (hasAccess)
{
	@ChildContent
}
else
{
	<MudContainer MaxWidth="MaxWidth.Small" Class="mt-16">
		<MudAlert Severity="Severity.Error">
			<MudText Typo="Typo.h6">Access Denied</MudText>
			<MudText>You don't have permission to access this area.</MudText>
			<MudButton Href="/" Color="Color.Primary" Class="mt-2">Return Home</MudButton>
		</MudAlert>
	</MudContainer>
}

@code {
	[Parameter] public RenderFragment? ChildContent { get; set; }
	[Parameter] public string? RequiredPermission { get; set; }
	[Parameter] public PlatformRoles? RequiredRole { get; set; }
	[Parameter] public string? RedirectTo { get; set; }

	private bool isLoading = true;
	private bool hasAccess = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var permissions = await PermissionsService.GetUserPermissions();

			if (permissions == null)
			{
				hasAccess = false;
			}
			else
			{
				hasAccess = CheckAccess(permissions);
			}

			isLoading = false;

			if (!hasAccess && !string.IsNullOrEmpty(RedirectTo))
			{
				Navigation.NavigateTo(RedirectTo);
				return;
			}

			StateHasChanged();
		}
	}

	private bool CheckAccess(UserPermissions permissions)
	{
		// Check role
		if (RequiredRole.HasValue && permissions.Role != RequiredRole.Value)
			return false;

		// Check specific permission
		if (!string.IsNullOrEmpty(RequiredPermission) &&
			!permissions.Permissions.Contains(RequiredPermission))
			return false;

		return true;
	}
}